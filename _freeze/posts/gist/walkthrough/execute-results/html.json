{
  "hash": "2c84bb1b27cac6d322d2f9ee9a85febd",
  "result": {
    "markdown": "---\ntitle: \"bits of fastai live-coding sessions\"\nauthor: \"Xiaochuan Yang\"\ndate: \"2023-11-11\"\ncategories: [hacks]\ndraft: false\ntoc: true\nnumber-sections: false\n---\n\nJeremy Howard, the founder of fastai, organized a series of live coding sessions covering the basics of git, bash, vim, tmux, and more, as a companion to the free fastai course on deep learning. Here is the [playlist](https://www.youtube.com/playlist?list=PLfYUBJiXbdtSLBPJ1GMx-sQWf6iNhb8mM) and the [forum post](https://forums.fast.ai/t/live-coding-aka-walk-thrus/96617). \n\n## Live coding 1  \n- intall WSL if on Windows (all commands below are typed in linux terminal in WSL)\n- `alt + enter` for full screen\n- `pwd` print working directory\n- `which` shows where a file is\n- `mkdir` makes a directory\n- `ls` list stuffs `-lah` long format all files human readable\n- `df -h` disk free\n- `du -sh *` disk usage `-s` summary of all subdirectories in `.`\n- `du -sh .` disk usage of `.`  \n- [conda-forge  distribution](https://github.com/conda-forge/miniforge) as of september 2023,  mambaforge/miniforge3 are the same. `-c conda-forge` is the default\n- `wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh` to download the distribution\n- `bash Miniforge3-Linux-x86_64.sh -b` to install, where `-b` for less intervention\n- install pytorch [here](https://pytorch.org/get-started/locally/)\n- `mamba install jupyter ipywidgets`\n- `alias jl=\"jupyter lab\"` add this command to the end of `.bashrc` to save alias for good\n- `mamba install -c fastai fastai`\n\n\n:::{.callout-tip}\nJeremy automated setup of conda in this [file](https://raw.githubusercontent.com/fastai/fastsetup/master/setup-conda.sh).  To run it, one needs to add executable permission to user `chmod u+x setup-conda.sh`\n:::\n\n## Live coding 2  \n\n\n#### bash  \n- `cd -` back to most recent directory\n- `pushd ~` push current directory to a stack and change directory to `~`\n- `popd` pop what's in the stack\n- `ctrl+d` exit for most program\n- `ctrl+u` `ctrl+w` `ctrl+a` `ctrl+e` move cursor faster\n\n\n#### tmux  \n- `tmux`\n- `ctrl+b` start of a tmux command, then\n- `\"` split top-bottom\n- `%` split left-right\n- `z` zoom in/out\n- `d` detach, back to bash\n- `tmux a` attach stuffs running in tmux from bash (everything remains until restart computer)\n\n\n#### git (with ssh)\n- `ssh-keygen` generates public/private rsa key pair (prompt where to save the file, by default it's in `~/.ssh`)\n- login to github.com and upload public key  `cat ~/.ssh/id_rsa.pub`\n- `git clone git@github.com:fastai/fastbook.git`\n- `git status` \n- `git commit -am 'MESSAGE'`\n- `git push`\n\n\n## Live coding 3  \n\n#### bash  \n- `ln -s ONE` simlink ONE to here\n- `$PATH` paths that bash knows to run program\n\n#### paperspace\n- `pip install --user PACKAGE` will install PACKAGE to `~/.local/lib/python3.*/site-packages`  which gets wiped after shutdown\n- `mv ~/.local /storage/.local` then \n- `ln -s /storage/.local ~/` to make it persistent (`/storage` is persistent across notebook instances)\n\n#### jupyter lab  \n- `ctrl + shift + [` change tab\n- `ctrl + b` hide side column\n- `%%debug` exit with `q`\n- `shift + tab` or `METHOD?` shows signature\n- `METHOD??` shows source code\n\n## Live coding 4\n\n:::{.callout-tip}\nJeremy teaches how to write your first bash script. The job done via these scripts is to set up paperspace for persistent storage and configs across instances. The repo is [here](https://github.com/fastai/paperspace-setup/tree/master).\n:::\n\n\n### first script `pre-run.sh`\n\n\n```{bash}\n#!/usr/bin/env bash\n\npushd ~\n\nmkdir -p /storage/cfg\n\nif [ ! -e /storage/cfg/.conda ]; then\n        mamba create -yp /storage/cfg/.conda\nfi\n\nfor p in .local .ssh .config .ipython .fastai .jupyter .conda .kaggle\ndo\n        if [ ! -e /storage/cfg/$p ]; then\n                mkdir /storage/cfg/$p\n        fi\n        rm -rf ~/$p\n        ln -s /storage/cfg/$p ~/\ndone\n\nchmod 700 /storage/cfg/.ssh\n\nfor p in .git-credentials .gitconfig .bash_history\ndo\n        if [ ! -e /storage/cfg/$p ]; then\n                touch /storage/cfg/$p\n        fi\n        rm -rf ~/$p\n        ln -s /storage/cfg/$p ~/\ndone\n\npopd\n```\n\n\n### second script `setup.sh`\n\n\n```{bash}\n#!/usr/bin/env bash\n\nmkdir /storage/cfg\ncp pre-run.sh /storage/\ncp .bash.local /storage/\necho install complete. please start a new instance\n```\n\n\n\n\n## Live coding 5\n\n\n#### bash\n- `cat FILE` display file\n- `cat f1 f2 > combined` concat\n- `cat f1 >> f2` append\n\n\n#### vim  \n- `i` insert mode\n- `esc` back to command mode\n- in command mode try `:q` to quit `:wq` to write and quit \n- tutorial [https://vim-adventures.com/](https://vim-adventures.com/)\n\nalternatively,  type `code .` then edit/create file with VS code \n\n\n## Live coding 6\n\n\n- `du -sh * | grep 'G'`  search ouput of `du -sh *` that contains `G` to identify directories larger than GB\n- `conda install universal-ctags`\n- copy config files to Paperspace (they'll be persistent if we've run the bash script before in live coding 4.)\n  -  copy ssh keys to `~/.ssh` and change permissions `chmod 644 ~/.ssh/id_rsa.pub` `chmod 600 ~/.ssh/id_rsa`\n  -  first time git commit needs `~/.gitconfig` to have name and email of the user, just follow the prompt. \n\n\n## Live coding 7\n\n- `pip isntall --user kaggle`  \n- pre-append `~/.bashrc` with  `export PATH=~/.local/bin:$PATH`\n- `source .bashrc` \n- create `kaggle.json` file from kaggle website and copy  it into `~/.kaggle`\n- navigate into `.kaggle` and `chmod 600 kaggle.json`\n- `kaggle competitions donwnload -c NAME`\n\n\nTry `time unzip -q BLA` to see how long it takes to unzip. \n\n\n- `nvidia-smi dmon` if sm is low, this means i/o slow. Try  \n  -  resize image\n  -  move files to local (see `get_data.sh` below) \n  -  reduce augmentation\n  -  change to CPU instance?\n\n\n\nOn paperspace, create `get_data.sh` in `/notebooks` (persistent)\n\n```{bash}\n#!/user/bin/env bash\ncd\nmkdir BLA\ncd BLA\nkaggle competitions donwnload -c NAME\nunzip -q NAME\n```\n\n",
    "supporting": [
      "walkthrough_files"
    ],
    "filters": [],
    "includes": {}
  }
}