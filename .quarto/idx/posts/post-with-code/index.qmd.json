{"title":"Secret 'SAWS' of deep learning, feature backprop","markdown":{"yaml":{"title":"Secret 'SAWS' of deep learning, feature backprop","author":"Xiaochuan Yang","date":"2023-10-08","categories":["deep learning","code"],"image":"image.jpg"},"headingText":"Training{#sec-training}","containsRefs":false,"markdown":"\n\n\n<!-- \\usepackage{minted} -->\n\\usepackage{amsmath,amsfonts,amssymb,amsthm,mathrsfs,mathtools,bbm}\n\\def\\RR{\\mathbb{R}}\n\\def\\ZZ{\\mathbb{Z}}\n\\def\\NN{\\mathbb{N}}\n\\def\\QQ{\\mathbb{Q}}\n\\def\\PP{\\mathbb{P}}\n\\def\\XX{\\mathbb{X}}\n\\def\\EE{\\mathbb{E}}\n\\def\\Var{\\mathbb{V}\\mathrm{ar}}\n\\def\\Cov{\\mathbb{C}\\mathrm{ov}}\n\\def\\Corr{\\mathbb{C}\\mathrm{orr}}\n\\def\\Ent{\\mathbb{E}\\mathrm{nt}}\n\\def\\1{\\mathbbm{1}}\n\nEveryone knows that a neural network is a universal function approximator that can be used to learn complex relationships between inputs and outputs. It is a learning machine that mimics biological neural networks in the human brain.  Mathematically, given an input $x\\in\\RR^{n_x}$, a neural nerwork computes an ouput $\\hat y\\in\\RR^{n_y}$ as follows,\n\\begin{align*}\na^{[1]} &= \\sigma(W^{[1]\\top} x + b^{[1]}) \\\\\na^{[2]} &= \\sigma(W^{[2]\\top} a^{[1]} + b^{[2]}) \\\\\n&\\vdots \\\\\na^{[L]} &= \\sigma(W^{[L]\\top} a^{[L-1]} + b^{[L]}) \\\\\n\\hat y &= \\sigma(W^{[L+1]\\top} a^{[L]} + b^{[L+1]})\n\\end{align*}\n\n\nHere $\\sigma:\\RR\\to\\RR$ is any nonlinear differentiable function (or sufficiently close to be such), $L$ is the number of hidden layers, $W$ and $b$ are weight matrices and bias vectors. We use $n_l$ to denote the number of hidden nodes in the $l$-th layer. The pre-activation vector at layer $l$ is denoted by $z^{[l]}$. \n\nFrom the definition we see that $\\hat y$ is not only a function of $x$, but also a function of $z^{[1]}, z^{[2]}$ and so forth using sub-networks. This may seem like stating the obvious, but it's a useful fact to keep in mind when we derive the algorithm for training these networks.   \n\n\n\n\n\nHow to train a neural network to make good predictions? Well, we first need to specify a computable objective. To achieve this we introduce a loss function that measures how good or bad a predictor is compared to the ground truth. This is called supervised learning. A commonly used loss is the squared loss \n\\begin{align*}\n    \\ell(u,v) =  \\frac{1}{2} \\|u-v\\|^2\n\\end{align*}\nwhere $\\|\\cdot\\|$ is the Euclidean norm. Then our goal is to minimize $J=\\ell(y,\\hat y)$. \n\nA general-purpose optimization method is gradient descent. In every iteration step, this method updates the parameters (i.e. weights and biases) by moving along the opposite of the gradient of the loss with respect to the parameters. Due to the characterization of the gradient of a function as being the direction along which the function increases the most (infinitesimally speaking), this method is heuristically justified for minimizing an objective function when the step size (aka learning rate) is not too large.\n\nA crucial point is that we need to compute all the partial derivatives for every gradient descent step! Mathematically this is tedious but not hard at all. Everyone knows that to differentiate a composition of functions, the chain rule is our best friend. Sure, we have multiple compositions, but it does not produce any conceptual complications because we can just apply the chain rule multiple times.\n\nTake weight matrix $W^{[1]}$ as an example. Any small nudge on its value would result in changes in $z^{[1]}$, and once we have the value of $z^{[1]}$, we feed it into the sub-network made of layers $1$ to $L+1$ and get the output. Hence $J=g(z^{[1]})$ for some $g$. By the chain rule,    \n\\begin{align*}\n    \\frac{\\partial J}{\\partial W^{[1]}} =  \n    \\sum_i \\frac{\\partial J}{\\partial z^{[1]}_i} \\frac{\\partial z^{[1]}_i}{\\partial W^{[1]}}. \n\\end{align*}\n\nThe second gradient in the summand is the rather simple because $z^{[1]}$ is a linear function of $W^{[1]}$. However, the first gradient is not explicit because the function $g$ is cumbersome as a composition of compositions of compositions ... What we can do is to apply chain rule again, then\n\\begin{align*}\n    \\frac{\\partial J}{\\partial z^{[1]}}\n    = \\sum_i \\frac{\\partial J}{\\partial z^{[2]}_i} \\frac{\\partial z^{[2]}_i}{\\partial z^{[1]}} \n\\end{align*}\n\n\nRecalling $z^{[2]} = W^{[2]\\top} \\sigma(z^{[1]}) + b^{[2]}$, the second gradient is easy to calculate. Hence, the gradient of $J$ with respect to the first layer pre-activation is a linear combination of the gradient with respect to the second layer pre-activation. Applying the chain rule recursively in the forward direction all the way to the output layer, we can express $\\frac{\\partial J}{\\partial z^{[1]}}$ as a multiple sum over $\\frac{\\partial J}{\\partial z^{[L+1]}}$ times multiple products of gradients of consecutive pre-activations.\n\nFollowing the same recipe, we can compute the gradients with respect to weights and biases of all the layers. In summary, we would need for all $l=1,\\ldots,L+1$:\n\\begin{itemize}\n    \\item $\\frac{\\partial z^{[l]}}{\\partial z^{[l-1]}}$\n    \\item $\\frac{\\partial z^{[l]}}{\\partial W^{[l]}}$\n\\end{itemize}\nand chain them together using multiple sums and products. \nThis seems like a lot of work, even for a computer! \n\nHere comes an important observation. There are lots of redundant computations if we use the recipe just described to compute an explicit form for all the gradients at every layer. \n\nThe big idea is to take advantage of the recursive relations between gradients with respect to pre-activations of consecutive layers. To be more precise, let's rewrite both equations at a general layer (we also include an equation for the biases).  \n\n\n$$\n\\frac{\\partial J}{\\partial W^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l]}_i} \\frac{\\partial z^{[l]}_i}{\\partial W^{[l]}}.\n$${#eq-gradW}\n\n$$\\frac{\\partial J}{\\partial b^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l]}_i} \\frac{\\partial z^{[l]}_i}{\\partial b^{[l]}}\n$${#eq-gradb}\n\n$$\\frac{\\partial J}{\\partial z^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l+1]}_i} \\frac{\\partial z^{[l+1]}_i}{\\partial z^{[l]}}\n$${#eq-recursion}\n\nLet $S^{[l]} = \\frac{\\partial J}{\\partial z^{[l]}}$. We use equations @eq-gradW and @eq-gradb, along with $S^{[L+1]}$ (easy to compute), to find the required gradients for updating $W^{[L+1]}$ and $b^{[L+1]}$. Then we use equation @eq-recursion to find $S^{[L]}$, which can be plugged back into equations @eq-gradW and @eq-gradb to get the required gradient for updating $W^{[L]}$ and $b^{[L]}$, and so on.\n\nWhat we just described is the famous backpropagation. The advantage of this approach is that we compute each basic computation (itemized above) only once for each gradient descent iteration.\n\nFrom layer to layer, the computation is done sequentially, because output of $l+1$-th layer is requiredd as the input for computing gradients of $l$-th layer. For each fixed $l$, however, it is better to parallelise the computation and write @eq-gradW -@eq-recursion  in matrix forms. Here is how we do it: \n\n\n### Squared loss\n\nSet $A^{[l]}=\\mathrm{diag}(\\sigma'(z^{[l]}))$ and $e = y - \\hat y$. It is easy to see that\n\\begin{align*}\n    S^{[L+1]} = - A^{[L+1]} e \n\\end{align*}\nEquation @eq-recursion can be written in matrix form as well\n$$\nS^{[l]} = A^{[l]} W^{[l+1]} S^{[l+1]}\n$${#eq-saws}\nNow the gradients\n\\begin{align*}\n    dW^{[l]} &= a^{[l-1]} S^{[l]\\top} \\\\\n    db^{[l]} &= S^{[l]}\n\\end{align*}\n\n@eq-saws is what I meant by secret \"SAWS\" of deep learning!\n\n### Cross entropy loss\n\nThe XE loss is defined for two probability mass functions as follows \n\\begin{align*}\n    \\ell(u,v) = -\\sum_k u_k\\log v_k.\n\\end{align*}\nIt is particularly well suited for multiclass classification problem. \nTo ensure that $\\hat y$ is a probability mass function. We use the softmax activation function at the output layer\n\\begin{align*}\n    \\mathrm{softmax}(x) =  \\frac{e^{x}}{\\sum_i e^{x_i}}\n\\end{align*}\nAll we have to do is to change the computation of $S^{[L+1]}$, namely the gradient of the XE loss with respect to the output layer pre-activation, then back propagate using the last three equations in the squared loss case. A routine application of chain rule yields that\n\\begin{align*}\n    S^{[L+1]} = - e\n\\end{align*}\nwhere $e$ was defined earlier in the squared loss case.  \n\n\n## Implementation\n\nHere is a python implementation of the training with min-batch SGD, 1 hidden layer, sigmoid activation in the hidden and output layers, and squared loss.\n \n```{python}\nimport numpy as np\ng = np.random.default_rng(11)\ng.chisquare(3,(5,))\n```\n\n**Exercise**: implement the training with XE loss, more hidden layers, and the tricks we will mention in the next section.  \n\n<!-- \n\\section{Tricks}\n\nTraining neural networks is hard. The backpropagation is the most fundamental technique but we need more tricks to make the training fast and stable. Deep learning researchers  have invented many tricks for this purpose, although some  of them are rather heuristic and hard to justify mathematically. \n \n\n\\paragraph{Scale the initialisation} \nFor wide neural works, using unscaled weight matrix with iid standard normal or symmetric uniform can lead to saturation of nodes of the next layer activation i.e. becoming close or equal to 1 (sigmoid activation function is used in this discussion). To fix this, one can simply scale the weight matrices by a factor of $1/\\sqrt{n}$ where $n$ is the number of nodes in the current layer so as to make the variance of the nodes in the next layer pre-activation of order 1. \n\n\\paragraph{Activation function}\nReLU activation, defined by $x\\mapsto x\\1(x>0)$, due to its simplicity and efficiency (e.g. its derivative is the indicator of positive half line), becomes popular over the last decade. One of the relatives of ReLU called GeLU given by $x\\mapsto x\\PP[N<x]$ where $N$ is a standard Gaussian is commonly used now in training large models  such as GPT and Bert.  -->","srcMarkdownNoYaml":"\n\n\n<!-- \\usepackage{minted} -->\n\\usepackage{amsmath,amsfonts,amssymb,amsthm,mathrsfs,mathtools,bbm}\n\\def\\RR{\\mathbb{R}}\n\\def\\ZZ{\\mathbb{Z}}\n\\def\\NN{\\mathbb{N}}\n\\def\\QQ{\\mathbb{Q}}\n\\def\\PP{\\mathbb{P}}\n\\def\\XX{\\mathbb{X}}\n\\def\\EE{\\mathbb{E}}\n\\def\\Var{\\mathbb{V}\\mathrm{ar}}\n\\def\\Cov{\\mathbb{C}\\mathrm{ov}}\n\\def\\Corr{\\mathbb{C}\\mathrm{orr}}\n\\def\\Ent{\\mathbb{E}\\mathrm{nt}}\n\\def\\1{\\mathbbm{1}}\n\nEveryone knows that a neural network is a universal function approximator that can be used to learn complex relationships between inputs and outputs. It is a learning machine that mimics biological neural networks in the human brain.  Mathematically, given an input $x\\in\\RR^{n_x}$, a neural nerwork computes an ouput $\\hat y\\in\\RR^{n_y}$ as follows,\n\\begin{align*}\na^{[1]} &= \\sigma(W^{[1]\\top} x + b^{[1]}) \\\\\na^{[2]} &= \\sigma(W^{[2]\\top} a^{[1]} + b^{[2]}) \\\\\n&\\vdots \\\\\na^{[L]} &= \\sigma(W^{[L]\\top} a^{[L-1]} + b^{[L]}) \\\\\n\\hat y &= \\sigma(W^{[L+1]\\top} a^{[L]} + b^{[L+1]})\n\\end{align*}\n\n\nHere $\\sigma:\\RR\\to\\RR$ is any nonlinear differentiable function (or sufficiently close to be such), $L$ is the number of hidden layers, $W$ and $b$ are weight matrices and bias vectors. We use $n_l$ to denote the number of hidden nodes in the $l$-th layer. The pre-activation vector at layer $l$ is denoted by $z^{[l]}$. \n\nFrom the definition we see that $\\hat y$ is not only a function of $x$, but also a function of $z^{[1]}, z^{[2]}$ and so forth using sub-networks. This may seem like stating the obvious, but it's a useful fact to keep in mind when we derive the algorithm for training these networks.   \n\n\n\n## Training{#sec-training}\n\n\nHow to train a neural network to make good predictions? Well, we first need to specify a computable objective. To achieve this we introduce a loss function that measures how good or bad a predictor is compared to the ground truth. This is called supervised learning. A commonly used loss is the squared loss \n\\begin{align*}\n    \\ell(u,v) =  \\frac{1}{2} \\|u-v\\|^2\n\\end{align*}\nwhere $\\|\\cdot\\|$ is the Euclidean norm. Then our goal is to minimize $J=\\ell(y,\\hat y)$. \n\nA general-purpose optimization method is gradient descent. In every iteration step, this method updates the parameters (i.e. weights and biases) by moving along the opposite of the gradient of the loss with respect to the parameters. Due to the characterization of the gradient of a function as being the direction along which the function increases the most (infinitesimally speaking), this method is heuristically justified for minimizing an objective function when the step size (aka learning rate) is not too large.\n\nA crucial point is that we need to compute all the partial derivatives for every gradient descent step! Mathematically this is tedious but not hard at all. Everyone knows that to differentiate a composition of functions, the chain rule is our best friend. Sure, we have multiple compositions, but it does not produce any conceptual complications because we can just apply the chain rule multiple times.\n\nTake weight matrix $W^{[1]}$ as an example. Any small nudge on its value would result in changes in $z^{[1]}$, and once we have the value of $z^{[1]}$, we feed it into the sub-network made of layers $1$ to $L+1$ and get the output. Hence $J=g(z^{[1]})$ for some $g$. By the chain rule,    \n\\begin{align*}\n    \\frac{\\partial J}{\\partial W^{[1]}} =  \n    \\sum_i \\frac{\\partial J}{\\partial z^{[1]}_i} \\frac{\\partial z^{[1]}_i}{\\partial W^{[1]}}. \n\\end{align*}\n\nThe second gradient in the summand is the rather simple because $z^{[1]}$ is a linear function of $W^{[1]}$. However, the first gradient is not explicit because the function $g$ is cumbersome as a composition of compositions of compositions ... What we can do is to apply chain rule again, then\n\\begin{align*}\n    \\frac{\\partial J}{\\partial z^{[1]}}\n    = \\sum_i \\frac{\\partial J}{\\partial z^{[2]}_i} \\frac{\\partial z^{[2]}_i}{\\partial z^{[1]}} \n\\end{align*}\n\n\nRecalling $z^{[2]} = W^{[2]\\top} \\sigma(z^{[1]}) + b^{[2]}$, the second gradient is easy to calculate. Hence, the gradient of $J$ with respect to the first layer pre-activation is a linear combination of the gradient with respect to the second layer pre-activation. Applying the chain rule recursively in the forward direction all the way to the output layer, we can express $\\frac{\\partial J}{\\partial z^{[1]}}$ as a multiple sum over $\\frac{\\partial J}{\\partial z^{[L+1]}}$ times multiple products of gradients of consecutive pre-activations.\n\nFollowing the same recipe, we can compute the gradients with respect to weights and biases of all the layers. In summary, we would need for all $l=1,\\ldots,L+1$:\n\\begin{itemize}\n    \\item $\\frac{\\partial z^{[l]}}{\\partial z^{[l-1]}}$\n    \\item $\\frac{\\partial z^{[l]}}{\\partial W^{[l]}}$\n\\end{itemize}\nand chain them together using multiple sums and products. \nThis seems like a lot of work, even for a computer! \n\nHere comes an important observation. There are lots of redundant computations if we use the recipe just described to compute an explicit form for all the gradients at every layer. \n\nThe big idea is to take advantage of the recursive relations between gradients with respect to pre-activations of consecutive layers. To be more precise, let's rewrite both equations at a general layer (we also include an equation for the biases).  \n\n\n$$\n\\frac{\\partial J}{\\partial W^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l]}_i} \\frac{\\partial z^{[l]}_i}{\\partial W^{[l]}}.\n$${#eq-gradW}\n\n$$\\frac{\\partial J}{\\partial b^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l]}_i} \\frac{\\partial z^{[l]}_i}{\\partial b^{[l]}}\n$${#eq-gradb}\n\n$$\\frac{\\partial J}{\\partial z^{[l]}} = \\sum_i \\frac{\\partial J}{\\partial z^{[l+1]}_i} \\frac{\\partial z^{[l+1]}_i}{\\partial z^{[l]}}\n$${#eq-recursion}\n\nLet $S^{[l]} = \\frac{\\partial J}{\\partial z^{[l]}}$. We use equations @eq-gradW and @eq-gradb, along with $S^{[L+1]}$ (easy to compute), to find the required gradients for updating $W^{[L+1]}$ and $b^{[L+1]}$. Then we use equation @eq-recursion to find $S^{[L]}$, which can be plugged back into equations @eq-gradW and @eq-gradb to get the required gradient for updating $W^{[L]}$ and $b^{[L]}$, and so on.\n\nWhat we just described is the famous backpropagation. The advantage of this approach is that we compute each basic computation (itemized above) only once for each gradient descent iteration.\n\nFrom layer to layer, the computation is done sequentially, because output of $l+1$-th layer is requiredd as the input for computing gradients of $l$-th layer. For each fixed $l$, however, it is better to parallelise the computation and write @eq-gradW -@eq-recursion  in matrix forms. Here is how we do it: \n\n\n### Squared loss\n\nSet $A^{[l]}=\\mathrm{diag}(\\sigma'(z^{[l]}))$ and $e = y - \\hat y$. It is easy to see that\n\\begin{align*}\n    S^{[L+1]} = - A^{[L+1]} e \n\\end{align*}\nEquation @eq-recursion can be written in matrix form as well\n$$\nS^{[l]} = A^{[l]} W^{[l+1]} S^{[l+1]}\n$${#eq-saws}\nNow the gradients\n\\begin{align*}\n    dW^{[l]} &= a^{[l-1]} S^{[l]\\top} \\\\\n    db^{[l]} &= S^{[l]}\n\\end{align*}\n\n@eq-saws is what I meant by secret \"SAWS\" of deep learning!\n\n### Cross entropy loss\n\nThe XE loss is defined for two probability mass functions as follows \n\\begin{align*}\n    \\ell(u,v) = -\\sum_k u_k\\log v_k.\n\\end{align*}\nIt is particularly well suited for multiclass classification problem. \nTo ensure that $\\hat y$ is a probability mass function. We use the softmax activation function at the output layer\n\\begin{align*}\n    \\mathrm{softmax}(x) =  \\frac{e^{x}}{\\sum_i e^{x_i}}\n\\end{align*}\nAll we have to do is to change the computation of $S^{[L+1]}$, namely the gradient of the XE loss with respect to the output layer pre-activation, then back propagate using the last three equations in the squared loss case. A routine application of chain rule yields that\n\\begin{align*}\n    S^{[L+1]} = - e\n\\end{align*}\nwhere $e$ was defined earlier in the squared loss case.  \n\n\n## Implementation\n\nHere is a python implementation of the training with min-batch SGD, 1 hidden layer, sigmoid activation in the hidden and output layers, and squared loss.\n \n```{python}\nimport numpy as np\ng = np.random.default_rng(11)\ng.chisquare(3,(5,))\n```\n\n**Exercise**: implement the training with XE loss, more hidden layers, and the tricks we will mention in the next section.  \n\n<!-- \n\\section{Tricks}\n\nTraining neural networks is hard. The backpropagation is the most fundamental technique but we need more tricks to make the training fast and stable. Deep learning researchers  have invented many tricks for this purpose, although some  of them are rather heuristic and hard to justify mathematically. \n \n\n\\paragraph{Scale the initialisation} \nFor wide neural works, using unscaled weight matrix with iid standard normal or symmetric uniform can lead to saturation of nodes of the next layer activation i.e. becoming close or equal to 1 (sigmoid activation function is used in this discussion). To fix this, one can simply scale the weight matrices by a factor of $1/\\sqrt{n}$ where $n$ is the number of nodes in the current layer so as to make the variance of the nodes in the next layer pre-activation of order 1. \n\n\\paragraph{Activation function}\nReLU activation, defined by $x\\mapsto x\\1(x>0)$, due to its simplicity and efficiency (e.g. its derivative is the indicator of positive half line), becomes popular over the last decade. One of the relatives of ReLU called GeLU given by $x\\mapsto x\\PP[N<x]$ where $N$ is a standard Gaussian is commonly used now in training large models  such as GPT and Bert.  -->"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"litera","title-block-banner":true,"title":"Secret 'SAWS' of deep learning, feature backprop","author":"Xiaochuan Yang","date":"2023-10-08","categories":["deep learning","code"],"image":"image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}